0x00 SETFP  X       FP = X;
                    SP = X;

0x10 SETSP  X       SP = FP + X;

0x20 PUSHI  X       ram[--SP] = X;

0x30 PUSHG  X       ram[--SP] = ram[X];

0x40 PUSHL  X       ram[--SP] = ram[FP + X];

0x50 POPG   X       ram[X] = ram[SP++];

0x60 POPL   X       ram[FP + X] = ram[SP++];

0x70 CALLI  X       ram[--SP] = PC;
                    ram[--SP] = FP;
                    FP = SP;
                    PC = X;

0x80 CALL           Tr = ram[SP++];
                    ram[--SP] = PC;
                    ram[--SP] = FP;
                    FP = SP;
                    PC = Tr;

0x90 RET            Tr = ram[SP++];
                    SP = FP;
                    FP = ram[SP++];
                    PC = ram[SP++];
                    ram[--SP] = Tr;

0xA0 {op}           Tr = ram[SP++];
     op = ADD,      Tl = ram[SP++];
          SUB,      ram[--SP] = Tl op Tr;   (Cond is set)

0xB0 CMP            Tr = ram[SP++];
                    Tl = ram[SP++];
                    Tl SUB Tr;           (Cond is set)

0xC0 SWAP           Tr = ram[SP++];
                    Tl = ram[SP++];
                    ram[--SP] = Tr;
                    ram[--SP] = Tl;

0xD0 JUMPI cond,X   if (cond) PC = X     (Cond is optional)

0xE0 JUMP  cond,X   Tr = ram[SP++];
                    if (cond) PC = Tr;   (Cond is optional)

0xF0 HALT
