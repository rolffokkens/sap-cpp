Registers:
  - PC:  Program Counter
  - SP:  Stack Pointer
  - FP:  Frame Pointer
  - TOR: Top Register
  - Tr:  Internal temporagy register (right ALU operand)
  - Tl:  Internal temporagy register (left  ALU operand)

Instructions

0x00 SETFP  X       FP = X;
                    SP = X;

0x10 SETSP  FP,X    SP = FP + X;
0x11 SETSP  SP,X    SP = SP + X;

0x20 LDTORC X       TOR = X

0x30 LDTORL X       TOR = FP + X

0x40 FETCH          TOR = ram[TOR]

0x50 STORE          ram[TOR] = ram[SP++]

0x60 PUSH           ram[--SP] = TOR

0x70 POP            TOR = ram[SP++]

0x80 CALL           ram[--SP] = PC;
                    ram[--SP] = FP;
                    FP = SP;
                    PC = TOR;

0x90 RET            SP = FP;
                    FP = ram[SP++];
                    PC = ram[SP++];

0xA0 {op}           TOR = ram[SP++] op TOR    # Cond is set; op = ADD, SUB, ...
    0xA2 = ADD
    0xA3 = SUB

0xB0 CMP   cond     ram[SP++] SUB TOR;       # Cond is set
    0xB4 = CMP Z    TOR = (cond != 0);
    0xB5 = CMP NZ   
    0xB6 = CMP C
    0xB7 = CMP NC
    0xB9 = CMP LT
    0xBA = CMP LE
    0xBB = CMP EQ
    0xBC = CMP GE
    0xBD = CMP GT
    0xBE = CMP NE

0xC0 SWAP           Tl = ram[SP++];
                    ram[--SP] = TOR;
                    TOR = Tl;

0xD0 OUT            Print TOR

0xE0 JUMP  cond     if (cond) PC = TOR;      # Cond is optional
    0xE0 = JUMP
    0xE4 = JUMP Z
    0xE5 = JUMP NZ
    0xE6 = JUMP C
    0xE7 = JUMP NZ
    0xE9 = JUMP LT
    0xEA = JUMP LE
    0xEB = JUMP EQ
    0xEC = JUMP GE
    0xED = JUMP GT
    0xEE = JUMP NE

0xF0 HALT
